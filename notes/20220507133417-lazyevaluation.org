:PROPERTIES:
:ID:       b979bf83-6570-4b78-addc-29a29ac9368e
:END:
#+title: LazyEvaluation

#+begin_quote
The Style of only evaluating what is needed. oro only evaluating a until that value is needed.
#+end_quote

Avoid repeated or strict evaluation.



Given
#+begin_src ini
List<Integer> numbers = Arrays.asList(1,2,3);
#+end_src
We have a lambda that relies on the external array factor
#+begin_src ini
int[] factor = new int[] { 2 };
Steam<Integer> strm = numbers.stream().map(e -> e * factor[0]);

factor[0] = 0
strm.forEach(System.out::println)
#+end_src

This makes the lambda not pure; it relies on external elements that can change.

While we initially expected the printed output to be 2, 4, 6 weâ€™ll be getting 0,0,0 This is because the lazy evaluation happens after the change.
