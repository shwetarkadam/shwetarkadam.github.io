<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Shweta's Braindump</title><link>https://shwetarkadam.github.io/notes/</link><description>Recent content in Notes on Shweta's Braindump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://shwetarkadam.github.io/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Javastreams</title><link>https://shwetarkadam.github.io/notes/20220430195539-javastreams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shwetarkadam.github.io/notes/20220430195539-javastreams/</guid><description>In Functional programming, we tell the code what to do and the livbrary does it for us.In imperative style we tell the code what to do and how to do it.
Java Stream Operations Methods include :
map: Used to apply or perform an operation on each element in the stream.
List number = Arrays.asList(2,3,4,5); List square = number.stream().map(x-&amp;gt;x*x).collect(Collectors.toList()); filter: Used to select or filter certain elements in the stream.</description></item></channel></rss>