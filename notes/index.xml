<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Shweta's Braindump</title><link>https://notes.codeklutz.com/notes/</link><description>Recent content in Notes on Shweta's Braindump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.codeklutz.com/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>FunctionalProgramming</title><link>https://notes.codeklutz.com/notes/20220430233852-functionalprogramming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220430233852-functionalprogramming/</guid><description>We have :
Inhererent Complexiity: Complexiitystemming from domain Accidental complexity: Complexity we create while trying to deal with inehrent complexity. &amp;gt; Functional Programming removes Accidental Complexity.
Functional Programming properties:
Assignment less Programming: Much like how we dont use goto while coding but its okay for compiler to use go under the hood.
goto is to strucutred programming assignment is to funtional programming (We try to avoid assignments)
Immutable state: We can make smart copies of objects instead of true copy or fully copy like trie data strcuture.</description></item><item><title>Iterators</title><link>https://notes.codeklutz.com/notes/20220501001308-iterators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501001308-iterators/</guid><description>External to Internal Iterators. Given
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10) External Iterators
for (int i = 0; i &amp;lt; numbers.size(); i++){ System.out.println(numbers.get(i)); } Internal Iterators
numbers.forEach((Integer E) -&amp;gt; System.out.println(e)); or even type inference in Java
numbers.forEach((e) -&amp;gt; System.out.println(e)); or method reference
numbers.forEach(System.out::println);</description></item><item><title>Javastreams</title><link>https://notes.codeklutz.com/notes/20220430195539-javastreams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220430195539-javastreams/</guid><description>In FunctionalProgramming , we tell the code what to do and the livbrary does it for us.In imperative style we tell the code what to do and how to do it.
Java Stream Operations Methods include :
map: Used to apply or perform an operation on each element in the stream.
List number = Arrays.asList(2,3,4,5); List square = number.stream().map(x-&amp;gt;x*x).collect(Collectors.toList()); filter: Used to select or filter certain elements in the stream.</description></item><item><title>LargestSubstringwithkUniqueCharacters</title><link>https://notes.codeklutz.com/notes/20220501164347-largestsubstringwithkuniquecharacters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501164347-largestsubstringwithkuniquecharacters/</guid><description>Refer :Variable Size SlidingWindow for identification
Window size is asked with largest substring with condition :no. of k unique characters in a sliding window
Input : aabacbebebe k=3
We need to maintin count of no of uniqwue character hence we will use map datastrcuture. Window Size cond:j-i+1
VariableSizeSlidingWindowFormat Solution</description></item><item><title>LazyEvaluationAndImmutability</title><link>https://notes.codeklutz.com/notes/20220501001919-lazyevaluationandimmutability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501001919-lazyevaluationandimmutability/</guid><description>Given
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1,2,3); We have a lambda that relies on the external array factor
int[] factor = new int[] { 2 }; Steam&amp;lt;Integer&amp;gt; strm = numbers.stream().map(e -&amp;gt; e * factor[0]); factor[0] = 0 strm.forEach(System.out::println) This makes the lambda not pure; it relies on external elements that can change.
While we initially expected the printed output to be 2, 4, 6 weâ€™ll be getting 0,0,0 This is because the lazy evaluation happens after the change.</description></item><item><title>LengthofLargestSubstringwithUnique RepeatingCharacters</title><link>https://notes.codeklutz.com/notes/20220501174600-lengthoflargestsubstringwithunique_repeatingcharacters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501174600-lengthoflargestsubstringwithunique_repeatingcharacters/</guid><description>Refer :Variable Size SlidingWindow for identification
Window size is asked with largest substring with condition :no. of unique characters in a sliding windowi
We need to maintin count of no of uniqwue character hence we will use map datastrcuture. Window Size cond:j-i+1
Relate to Problem LargestSubstringwithkUniqueCharacters we dont have the value of k. Now with whom should we compare map.size() with?? Since it says All unique chracters instead of K it means that in a window of size 5 all the characters in that window should in that particular window should be unique .</description></item><item><title>MaximumSumSubarrayofsizek</title><link>https://notes.codeklutz.com/notes/20220501163418-maximumsumsubarrayofsizek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501163418-maximumsumsubarrayofsizek/</guid><description>Problem Statement : Max Sum subarray of size k a=[200,200,300,400] N=4,k=2
Output :700
Window size = j-i+1; Then compare it with K when need arises.</description></item><item><title>SlidingWindow</title><link>https://notes.codeklutz.com/notes/20220501160921-slidingwindow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501160921-slidingwindow/</guid><description>Aditya Verma Approach to sliding window :
Identificatiion : Could be array or string. There is a window which is continous (doesnt break) . Question might ask related to subarray or substring .Also it can ask largest or smallest value in the question. Window size will be given or the question might ask to find out window size. Window size | Condition
2 Types of Sliding window problems: a.</description></item><item><title>VariableSizeSlidingWindowFormat</title><link>https://notes.codeklutz.com/notes/20220501170453-variablesizeslidingwindowformat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220501170453-variablesizeslidingwindowformat/</guid><description>General Format of Variable Size Sliding Window by Aditya Verma while(j&amp;lt;size) { some calculations involving j if(condition &amp;lt;k) j++; else if(cond. ==k) { ans=calcul;ations j++; } else if( condition &amp;gt;k ){ while(condition &amp;gt;k){ remove calculation for i i++; } j++ } }</description></item></channel></rss>