<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shweta's Braindump</title><link>https://notes.codeklutz.com/</link><description>Recent content on Shweta's Braindump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.codeklutz.com/index.xml" rel="self" type="application/rss+xml"/><item><title>FunctionalProgramming</title><link>https://notes.codeklutz.com/notes/20220507070353-functionalprogramming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507070353-functionalprogramming/</guid><description>We have :
Inhererent Complexiity: Complexiitystemming from domain Accidental complexity: Complexity we create while trying to deal with inehrent complexity. &amp;gt; Functional Programming removes Accidental Complexity.
Functional Programming properties:
Assignment less Programming: Much like how we dont use goto while coding but its okay for compiler to use go under the hood.
goto is to strucutred programming assignment is to funtional programming (We try to avoid assignments)
Immutable state: We can make smart copies of objects instead of true copy or fully copy like trie data strcuture.</description></item><item><title>Git</title><link>https://notes.codeklutz.com/notes/20220507132936-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507132936-git/</guid><description>Update local feature from master branch git checkout the_branch_you_want_to_update git merge origin/master For same changes to reflect in remote branch git push origin the_branch_you_want_to_update //to update the remote feature branch To see the list of commits that are causing conflict git log --merge Maintain multiple users in git without ssh for specfic repos Refer</description></item><item><title>Iterators</title><link>https://notes.codeklutz.com/notes/20220507070445-iterators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507070445-iterators/</guid><description>External to Internal Iterators. Given
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10) External Iterators
for (int i = 0; i &amp;lt; numbers.size(); i++){ System.out.println(numbers.get(i)); } Internal Iterators
numbers.forEach((Integer E) -&amp;gt; System.out.println(e)); or even type inference in Java
numbers.forEach((e) -&amp;gt; System.out.println(e)); or method reference
numbers.forEach(System.out::println);</description></item><item><title>JavaStreams</title><link>https://notes.codeklutz.com/notes/20220507133804-javastreams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507133804-javastreams/</guid><description>In FunctionalProgramming , we tell the code what to do and the livbrary does it for us.In imperative style we tell the code what to do and how to do it.
Java Stream Operations Methods include :</description></item><item><title>LazyEvaluation</title><link>https://notes.codeklutz.com/notes/20220507133417-lazyevaluation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507133417-lazyevaluation/</guid><description>Given
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1,2,3); We have a lambda that relies on the external array factor
int[] factor = new int[] { 2 }; Steam&amp;lt;Integer&amp;gt; strm = numbers.stream().map(e -&amp;gt; e * factor[0]); factor[0] = 0 strm.forEach(System.out::println) This makes the lambda not pure; it relies on external elements that can change.
While we initially expected the printed output to be 2, 4, 6 weâ€™ll be getting 0,0,0 This is because the lazy evaluation happens after the change.</description></item><item><title>Recursion</title><link>https://notes.codeklutz.com/notes/20220507121211-recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507121211-recursion/</guid><description>Approaches to Recursion acc to Aditya Varma
Recursive Tree - Input Output Method Hypothesis Induction Base method (Better for tree ,linked lists) Choice Diagram (DP)</description></item><item><title>Shweta's Braindump</title><link>https://notes.codeklutz.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/about/</guid><description>Hi! I&amp;rsquo;m Shweta , and you&amp;rsquo;ve stumbled upon my braindump. This website contains my working notes accumulated over some weeks. I shall add which I find insightful or useful. So stay tuned
You can start hopping around by going to the full index . Have fun!</description></item><item><title>SlidingWindow</title><link>https://notes.codeklutz.com/notes/20220507061840-slidingwindow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507061840-slidingwindow/</guid><description>Aditya Verma Approach to sliding window :
Identificatiion : Could be array or string. There is a window which is continous (doesnt break) . Question might ask related to subarray or substring .Also it can ask largest or smallest value in the question. Window size will be given or the question might ask to find out window size. Window Size | Condition 2 Types of Sliding window problems:</description></item><item><title>VariableSizeSlidingWindowFormat</title><link>https://notes.codeklutz.com/notes/20220507070237-variablesizeslidingwindowformat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.codeklutz.com/notes/20220507070237-variablesizeslidingwindowformat/</guid><description>General Format of Variable Size Sliding Window by Aditya Verma while(j&amp;lt;size) { some calculations involving j if(condition &amp;lt;k) j++; else if(cond. ==k) { ans=calcul;ations j++; } else if( condition &amp;gt;k ){ while(condition &amp;gt;k){ remove calculation for i i++; } j++ } }</description></item></channel></rss>